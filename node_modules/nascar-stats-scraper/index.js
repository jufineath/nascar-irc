/* Copyright (c) 2013 Justin King

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to
deal in the Software without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
IN THE SOFTWARE. */

var events = require('events');
var util = require('util');

// One request object
var request = require('request');

// rawData holds the parsed JSON from NASCAR's leaderboard

var target_url;


function LeaderboardClient(url, refresh_interval) {
  var self = this;
  target_url = url

  self.rawData=[], self.runOrderIndex=[], self.pointsOrderIndex=[],
      self.luckyDogDriver=[], self.lastLapSpeedIndex=[],self.bestLapSpeedIndex=[];
  
  
  // This method parses the leaderboard JSON, and creates some indexes for us
  this.update_leaderboard = function() {
    console.log('update_leaderboard begin');

    // Request the leaderboard from configured URL
    request(target_url, function (error, response, body) {
      if (!error && response.statusCode == 200) {
        // Proceed only if we don't detect an error, *and* status is good 

        // Store the JSON in the rawData array
        try {
          self.rawData = JSON.parse(body);
        } catch (err) {console.log('bad data:' + body);}

        if("length" in self.rawData) { console.log('update_leaderboard - bailing, no leaderboard'); return;}

        // Re-initialize the pointsOrderIndex index
        self.pointsOrderIndex = []
        // Loop through rawData.Passings and note the car number, points,
        //   points position and leaderbaord_data.Passings index
        for(var i=0;i<self.rawData.Passings.length;i++) {
          self.pointsOrderIndex[i] = {'CarNo' : self.rawData.Passings[i].CarNo,
          'Points' : self.rawData.Passings[i].Points,
          'PointsPosition' : self.rawData.Passings[i].PointsPosition,
          'index' : i};
        }
        // Sort the _points array by the PointsPosition property in order of
        //   1, 2, 3, ..., N
        self.pointsOrderIndex.sort(makeNumericCmp('PointsPosition'));


        // Re-initialize the runOrderIndex index
        self.runOrderIndex = []
        // Loop through rawData.Passings and note the car number, race rank/position,
        //  and leaderbaord_data.Passings index
        for(var i=0;i<self.rawData.Passings.length;i++) {
          self.runOrderIndex[i] = {'CarNo' : self.rawData.Passings[i].CarNo,
          'RaceRank' : self.rawData.Passings[i].RaceRank,
          'index' : i};
        }
        // Sort the _running array by the RaceRank (running order) property in order of
        //   1, 2, 3, ..., N
        self.runOrderIndex.sort(makeNumericCmp('RaceRank'));

        self.emit('updated_board', 'all good');
      


        // Loop through the array of cars and note the first one with an SFDelta = -1
        //   this is the first car NOT on the lead lap, and will be the car eligible
        //   for the Lucky Dog Pass
        // TODO: This should leverage the sorted _running array, not just assume that
        //         Passings is in running order  
        for(var i=0;i<self.runOrderIndex.length;i++) {
          if(self.rawData.Passings[i].SFDelta == -1) {
            self.luckyDogDriver = i;
            break;
          }
        }



        // Capturing each car's speed as of their last completed lap
        //   putting it in _speed_last index, ordered by fastest
        self.lastLapSpeedIndex = []
        for(var i=0;i<self.rawData.Passings.length;i++) {
          self.lastLapSpeedIndex[i] = {'CarNo' : self.rawData.Passings[i].CarNo, 'LastLapSpeed' : self.rawData.Passings[i].LastLapSpeed, 'index' : i};
        }
        self.lastLapSpeedIndex.sort(makeNumericCmpRev('LastLapSpeed'));


        // Capturing each car's speed as of their BEST completed lap
        //   putting it in _speed_best index, ordered by fastest
        self.bestLapSpeedIndex = []
        for(var i=0;i<self.rawData.Passings.length;i++) {
          self.bestLapSpeedIndex[i] = {'CarNo' : self.rawData.Passings[i].CarNo, 'BestSpeed' : self.rawData.Passings[i].BestSpeed, 'index' : i};
        }
        self.bestLapSpeedIndex.sort(makeNumericCmpRev('BestSpeed'));
        // Print data for testing by uncommenting below
        // console.dir(data);

        // TODO: When this is extracted to nascar-lib there should be a property
        //  to allow you to define a callback after each leaderboard refresh
        //  or an 'event', as it were
       // try {postUpdateCallBbck();} catch (err) {}
       console.log('emitting done')
       self.emit('updated_board', 'all good');
      }  

    });


    // Commenting this out as it is probably not needed
    // Normal GC should wipe this. Will remove this comment and code at later date
    // 
    // TODO: See comment
    // delete fs; delete err; delete data;


    //try {postUpdateCallBack();} catch (err) {}

    console.log('update_leaderboard end');
  }
  
  
  

  // Returns a string identifying (currentlap/totallaps)
  // Will return (0/0) if there is an error reading leaderboard data
  this.lapticker = function() {
    var ticker = '(0/0)';

    try {
      ticker = '(' + self.rawData.CurrentLapNumber + '/' +
                          self.rawData.LapsInRace + ')';
    } catch (err) {}

    return ticker;                      
  }


  
  setInterval(this.update_leaderboard, refresh_interval)
  events.EventEmitter.call(this);
}


util.inherits(LeaderboardClient, events.EventEmitter);
exports.LeaderboardClient = LeaderboardClient;





// These are comparators for our leaderboard indexes
// They allow us to sort by a numeric property such as Points, RaceRank
function makeNumericCmp(property) {
    return function (a, b) {
        return parseInt(a[property]) - parseInt(b[property]);
    };
}
function makeNumericCmpRev(property) {
    return function (a, b) {
        return parseInt(b[property]) - parseInt(a[property]);
    };
}
